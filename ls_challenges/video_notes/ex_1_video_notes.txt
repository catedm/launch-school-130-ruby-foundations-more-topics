Problem solving patterns:
  - if you can see a common pattern like the ones below within the problem,
    it can often be worthwhile to try out one of the methods that fits in the solution
  - map: n things -> n other things
  - reduce: [] -> one_thing
  - select: m things -> n things

Bullet Takeaways:
  - If you are not given a test suite in an interview, make sure you consider edge cases
  - Display thoughtfulness by considering edge cases up front

How to work with a coding problem:
  - don't underestimate; resist the urge to dive into code
  - read the description 3 times; produce an outline if necessary
  - communicate and clarify
    - 'what about this input?'
  - test cases (happy paths, fail paths, edge cases)
  - have a plan (algorithm), and verify with that
  - manage your energy
    - don't try to tackle hardest part of problem last
  - abstraction (multiple methods)
